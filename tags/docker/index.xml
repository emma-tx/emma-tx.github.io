<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on scarbrough-trx@GitHub</title>
    <link>/tags/docker/</link>
    <description>Recent content in Docker on scarbrough-trx@GitHub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Some notes on upgrading to .NET 7</title>
      <link>/post/dotnet-7-release/</link>
      <pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/dotnet-7-release/</guid>
      <description>The official release for .NET 7.0 is in November 2022, though there have been a number of preview versions this year. In order to upgrade services to this, it might be necessary to update Visual Studio and MSBuild first.
Target Framework To upgrade, set the target framework as follows:
&amp;lt;TargetFramework&amp;gt;net7.0&amp;lt;/TargetFramework&amp;gt; And maybe do the following update all package references to 7.0.0 for Microsoft.AspNetCore and Microsoft.Extensions.
Other target frameworks include:
net7.0 net7.</description>
    </item>
    
    <item>
      <title>Docker Basics</title>
      <link>/post/docker-basics/</link>
      <pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/docker-basics/</guid>
      <description>A Docker container runs as a sandboxed process on a local system or a server, and consists of at least one image. An image is built from the source code of an application or service, and can be distributed, through a repository, to provide others the means of testing an existing software product with minimal setup.
Containers and images can be managed through the Docker Dashboard application. As such, a Docker container will require its own configurations and script that enable it to run as intended.</description>
    </item>
    
    <item>
      <title>Kestrel HTTPS Error - .Net Core and Docker</title>
      <link>/post/kestrel-errors/</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/kestrel-errors/</guid>
      <description>The following is another commonly-posted question in Stack Overflow, which I&amp;rsquo;ve been looking at while debugging the same problem:
System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found or is out of date. The most obvious cause would be Kestrel trying to use invalid or expired HTTPS certificates. However, looking more closely, my error message was preceded by:
[...][15:25:25 FTL] Unable to start Kestrel.</description>
    </item>
    
    <item>
      <title>Several potential fixes for the missing .NET SDK error (Docker and .NET Core)</title>
      <link>/post/docker-missing-dotnet-sdk/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/docker-missing-dotnet-sdk/</guid>
      <description>There have been many people asking about this on Stack Overflow, and none of the answers there brought me closer to resolving the problem, which, it later transpired, was caused by something really silly I&amp;rsquo;d overlooked. When running &amp;lsquo;docker-compose up&amp;rsquo; in the Docker CLI, for a .NET Core service, the output reports that it cannot find an installed SDK:
It was not possible to find any installed .NET Core SDKsDid you mean to run .</description>
    </item>
    
  </channel>
</rss>
