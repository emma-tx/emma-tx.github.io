<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on scarbrough-trx@GitHub</title>
    <link>/categories/development/</link>
    <description>Recent content in Development on scarbrough-trx@GitHub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/categories/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dependency scanning tools as a solution to a different problem</title>
      <link>/post/dependency-scanning/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/post/dependency-scanning/</guid>
      <description>Since dependency vulnerability scanning has been suggested by colleagues as something that could help with security/standards compliance and addressing legacy software, I&amp;rsquo;ve been looking into a few services to see how useful the available options could be.
NPM Audit Dependency scanning is performed by default with the install command for later versions of NPM, and by default, the output of npm audit will show a few lines of relevant information about each package with a reported vulnerability - its rating, a brief description of the vulnerability and whether an update is available.</description>
    </item>
    
    <item>
      <title>A Static Site Generator Function on Azure</title>
      <link>/post/azure-ssg/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/post/azure-ssg/</guid>
      <description>What follows is a heavily abbreviated version of a Function App component I&amp;rsquo;ve been working on.
The Function App works a lot like a controller in an MVC application, except in this case the data is provided by an API, and the Web pages are generated and stored in the Resource Group&amp;rsquo;s storage container. Azure provides the Web server that hosts these. Apparently this is the way technology is going for organisations that want to build sites that don&amp;rsquo;t need to be updated in real-time.</description>
    </item>
    
    <item>
      <title>Upgrading Azure Logic Apps</title>
      <link>/post/azure-logic-app-upgrade/azure-logic-app-upgrade/</link>
      <pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/azure-logic-app-upgrade/azure-logic-app-upgrade/</guid>
      <description>One of our static site generators consists of a set of Azure Logic Apps that perform various tasks, from aggregating data to constructing Web pages. The Logic Apps will each call an Azure Function to build specific elements of the Web site. For example, the myDirectoryProcessor Logic App calls the GeneratorHTML and GenerateMainIndexHTML Functions.
Upgrading the service will involve modifications to the Function App and the Logic Apps that use it.</description>
    </item>
    
    <item>
      <title>Tracing SQL Server Integration / Job Failures</title>
      <link>/post/check-sql-server-jobs-errors/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/check-sql-server-jobs-errors/</guid>
      <description>Job Activity Monitor In SQL Server Management Studio’s Object Explorer window, select SQL Server Agent -&amp;gt; Job Activity Monitor.
In the Job Activity Monitor window, check the Enabled and Status columns for the service(s) of interest. To view the details of a log entry, right-click on that entry and select ‘View History’. This will open the Log File Viewer for the service. Further information about a failed execution can be viewed by expanding the entry or by expanding the details pane below the log entries.</description>
    </item>
    
    <item>
      <title>Azure Function App Migration</title>
      <link>/post/azure-function-app-migration/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/azure-function-app-migration/</guid>
      <description>After clicking ‘Create’, select ‘Develop in portal’, and HTTP Trigger or Service Bus Trigger, depending on the type of Function App being added.
Most the required information – function name, connection, queue name, etc. – can be copied from the original function’s JSON file.
In Code + Test, copy the code from the old function or the Visual Studio Solution.
In the Integration section, the values for Trigger, Inputs and Outputs also need to be copied over.</description>
    </item>
    
    <item>
      <title>Some notes on upgrading to .NET 7</title>
      <link>/post/dotnet-7-release/</link>
      <pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/dotnet-7-release/</guid>
      <description>The official release for .NET 7.0 is in November 2022, though there have been a number of preview versions this year. In order to upgrade services to this, it might be necessary to update Visual Studio and MSBuild first.
Target Framework To upgrade, set the target framework as follows:
&amp;lt;TargetFramework&amp;gt;net7.0&amp;lt;/TargetFramework&amp;gt; And maybe do the following update all package references to 7.0.0 for Microsoft.AspNetCore and Microsoft.Extensions.
Other target frameworks include:
net7.0 net7.</description>
    </item>
    
    <item>
      <title>Hugo and the Mainroad Theme</title>
      <link>/post/hugo-and-mainroad/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/hugo-and-mainroad/</guid>
      <description>I think I&amp;rsquo;ve found the ideal theme for my Hugo site. Mainroad is relatively simple in design, the layout is roughly what I was looking for, and it&amp;rsquo;s easier to customise. It still has tags and categories features that are essential for a site hosting technical documentation. I spent around six hours learning how the template works, re-arranging the content and tweaking the CSS to make it as clean as my MkDocs site.</description>
    </item>
    
    <item>
      <title>Netlify CMS and Continuous Deployment for Hugo</title>
      <link>/post/netlify-cms-hugo/</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/netlify-cms-hugo/</guid>
      <description>Netlify CMS and Continuous Deployment for Hugo Having experimented with this, I think Netlify&amp;rsquo;s idea of tacking a CMS onto a static site generator is tailored for situations where multiple developers, through Continuous Deployment, are providing a corporate site for which the content is being edited by non-technical users. At least it appears that way, because it takes a lot of work to develop the site and configure the CMS for anything more generic than the template provided, and an individual developer working on this as a personal project would most likely dispense with the CMS entirely and modify the files in the /content directory themselves (I&amp;rsquo;ll explain why).</description>
    </item>
    
    <item>
      <title>Migrations Using Visual Studio SQL Server Database Project</title>
      <link>/post/sql-server-database-vs-project/</link>
      <pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/sql-server-database-vs-project/</guid>
      <description>Migrations Using Visual Studio SQL Server Database Project Setting Up the Migration Project Add a new project to the Visual Studio solution. This project will initially be empty, without assembly references or scaffold files - it appears everything is native to Visual Studio. To this we need to add the connection to the database the schema is to be imported from. There will be a menu option for &amp;lsquo;Import&amp;rsquo; -&amp;gt; &amp;lsquo;Database&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Docker Basics</title>
      <link>/post/docker-basics/</link>
      <pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/docker-basics/</guid>
      <description>A Docker container runs as a sandboxed process on a local system or a server, and consists of at least one image. An image is built from the source code of an application or service, and can be distributed, through a repository, to provide others the means of testing an existing software product with minimal setup.
Containers and images can be managed through the Docker Dashboard application. As such, a Docker container will require its own configurations and script that enable it to run as intended.</description>
    </item>
    
    <item>
      <title>Entity Framework Migrations</title>
      <link>/post/entity-framework-migrations/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/entity-framework-migrations/</guid>
      <description>The purpose of generating Entity Framework migrations is to apply database schema changes consistently across Staging, UAT and Production environments.
The proposed method would involve developers generating migration a migration script whenever changes are made to the Entity Framework model in their projects. The DevOps team would apply that migration script to update the Azure environments. The services and applications being developed themselves should not have permissions to modify the environment.</description>
    </item>
    
    <item>
      <title>Kestrel HTTPS Error - .Net Core and Docker</title>
      <link>/post/kestrel-errors/</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/kestrel-errors/</guid>
      <description>The following is another commonly-posted question in Stack Overflow, which I&amp;rsquo;ve been looking at while debugging the same problem:
System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found or is out of date. The most obvious cause would be Kestrel trying to use invalid or expired HTTPS certificates. However, looking more closely, my error message was preceded by:
[...][15:25:25 FTL] Unable to start Kestrel.</description>
    </item>
    
    <item>
      <title>Azure Active Directory Authentication for .NET Core Services</title>
      <link>/post/dotnet-core-azure-ad-authentication/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/dotnet-core-azure-ad-authentication/</guid>
      <description>If upgrading an existing application, the following are required from NuGet:
Microsoft.Identity.Web Microsoft.Identity.Web.UI Generating the Project The project in this repository was generated from the ASP.NET Core Web App template. When generating the project, select &amp;lsquo;Microsoft identity platform&amp;rsquo; as the Authentication type in the Additional Information section. HTTPS and Docker were also enabled for this project.
After installing dotnet msidentity tool, Visual Studio will display the Service Dependencies and Service References.</description>
    </item>
    
    <item>
      <title>.NET Core - xUnit Tests with Repository Pattern and IUNitOfWork</title>
      <link>/post/dotnet-core-xunit/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/dotnet-core-xunit/</guid>
      <description>After some hours of frustration and asking myself whether I should have used Unit of Work in the first place (there are already layers of abstraction in the standard .NET Core template project) I managed to get a functioning xUnit test method that mocks the repositories, populates them with data and verifies the model returned by a controller method.
Setting Up a Unit Test Project Add a xUnit project to the solution, then add an assembly reference in that to the project being tested.</description>
    </item>
    
    <item>
      <title>Entity Framework Core Command Line Reference</title>
      <link>/post/ef-core-cli-reference/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/ef-core-cli-reference/</guid>
      <description>Installing Entity command line The .NET Entity Framework command line tools can be installed globally in PowerShell, or just for a specific project.
dotnet tool install --global dotnet-ef After installation, it might be a good idea to update the tools:
dotnet tool update --global dotnet-ef Add the Entity Framework Packages to a Project In order to use the Entity Framework command line tools for a .NET Core project, it&amp;rsquo;s necessary to install the Design package.</description>
    </item>
    
    <item>
      <title>.NET Core 6 - Dependency Injection, Repository Pattern and Unit of Work</title>
      <link>/post/repository-pattern-and-uow/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/repository-pattern-and-uow/</guid>
      <description>A repository pattern exists to add another layer of abstraction between the application logic and the data layer, using dependency injection to decouple the two. It&amp;rsquo;s not my preferred way of doing things, because of the effort and complexity involved, and I&amp;rsquo;m certainly not the only person who initially struggled to understand the concepts behind it. Plus, it&amp;rsquo;s apparent that Entity Framework makes heavy use of that dependency injection already. But a Repository Pattern is widely considered - by software engineers far more experienced than I am - best practice for engineering services that deal with critical data.</description>
    </item>
    
    <item>
      <title>Implementing an AJAX Request in .NET Core 6 MVC</title>
      <link>/post/dotnet-core-ajax/</link>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/dotnet-core-ajax/</guid>
      <description>One of the problems with implementing a search feature that returns a table in a partial view is the Entity Framework model declarations must be strongly-typed. This means we run into difficulties declarating a model in the containing view and an IEnumerable instance of it for the partial view. One way around this is to instead discard the model for the mainview, and use jQuery and AJAX to read values from specific input elements in the main view, and pass those values to the controller action that returns the partial view with the IEnumerable model.</description>
    </item>
    
    <item>
      <title>Thoughts on NET Core 6.0, Entity Framework and the New MVC Pattern</title>
      <link>/post/dotnet-core-6-ef-mvc/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/dotnet-core-6-ef-mvc/</guid>
      <description>The following mostly doesn&amp;rsquo;t refer to problems native to the .NET Core 6 Framework itself, but rather some difficulties I encountered while getting an Entity Framework Database-First model working in the MVC project template generated by Visual Studio 2022.
Some of the problems centred around:
Breaking changes and things that might be awkward for developers accustomed to working with legacy non-Core versions of .NET (espectially .NET MVC). Not much documentation out there, relative to what&amp;rsquo;s published for the older .</description>
    </item>
    
    <item>
      <title>OpenCart Development Notes</title>
      <link>/post/opencart/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/opencart/</guid>
      <description>Overview The OpenCart system follows the MVC (Model, View, Controller) pattern. A simple description of how this works is that a View determines the layout and appearance of a Web site, whereas the content itself is generated and inserted into the View by a Controller. A Model contains data objects that represent database entities being processed by the Controller.
With OpenCart, we have a more complicated implementation of the MVC pattern, mainly because a site&amp;rsquo;s appearance isn&amp;rsquo;t actually determined by a set of HTML/CSHTML files in the /views directory.</description>
    </item>
    
    <item>
      <title>Several potential fixes for the missing .NET SDK error (Docker and .NET Core)</title>
      <link>/post/docker-missing-dotnet-sdk/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/docker-missing-dotnet-sdk/</guid>
      <description>There have been many people asking about this on Stack Overflow, and none of the answers there brought me closer to resolving the problem, which, it later transpired, was caused by something really silly I&amp;rsquo;d overlooked. When running &amp;lsquo;docker-compose up&amp;rsquo; in the Docker CLI, for a .NET Core service, the output reports that it cannot find an installed SDK:
It was not possible to find any installed .NET Core SDKsDid you mean to run .</description>
    </item>
    
  </channel>
</rss>
